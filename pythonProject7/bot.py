import asyncio
import json
import os
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
                           InlineKeyboardMarkup, InlineKeyboardButton)

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------
logging.basicConfig(level=logging.INFO)

# -------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# -------------------------
USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

def register_user(user_id, username):
    users = load_users()
    uid = str(user_id)
    if uid not in users:
        users[uid] = {"username": username}
        save_users(users)

def is_registered(user_id):
    users = load_users()
    return str(user_id) in users

# -------------------------
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
# -------------------------
PROGRESS_FILE = "progress.json"

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_progress(progress):
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress, f, ensure_ascii=False, indent=4)

def mark_subject_completed(user_id, subject):
    progress = load_progress()
    uid = str(user_id)
    if uid not in progress:
        progress[uid] = []
    if subject not in progress[uid]:
        progress[uid].append(subject)
        save_progress(progress)

def is_subject_completed(user_id, subject):
    progress = load_progress()
    return str(user_id) in progress and subject in progress[str(user_id)]

# -------------------------
# –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏ —Ç–µ—Å—Ç–∞–º–∏
# -------------------------
SUBJECTS_FILE = "subjects.json"
TESTS_FILE = "tests.json"

def load_subjects():
    try:
        with open(SUBJECTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {SUBJECTS_FILE}: {e}")
        return {}

def load_tests():
    if os.path.exists(TESTS_FILE):
        with open(TESTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def load_subject(subject):
    """
    –î–ª—è –ª–∏—Å—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç.
    """
    subject = subject.strip().lower()
    path = f"subjects/{subject}.json"
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}")
            return None
    return None

def build_keyboard(options):
    kb = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    for opt in options:
        kb.keyboard.append([KeyboardButton(text=opt)])
    kb.keyboard.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])
    return kb

def get_node(path):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ (—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π).
    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞ ‚Äì —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª subjects/{value}.json.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ª–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª.
    """
    node = load_subjects()
    for key in path:
        if isinstance(node, dict) and key in node:
            node = node[key]
            if isinstance(node, str):
                file_path = f"subjects/{node}.json"
                if os.path.exists(file_path):
                    try:
                        node = json.load(open(file_path, "r", encoding="utf-8"))
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
                        return None
                else:
                    return node
        else:
            return None
    return node

# -------------------------
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
# -------------------------
user_nav_state = {}

# -------------------------
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------
# –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
# –§–æ—Ä–º–∞—Ç: { user_id: { full_subject: {"current_index": int, "correct": int} } }
user_test_states = {}

# -------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# -------------------------
def load_config():
    with open("config.json", "r", encoding="utf-8") as f:
        return json.load(f)

config = load_config()
API_TOKEN = config["bot_token"]  # –¢–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    uid = str(message.from_user.id)
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    register_user(uid, username)
    user_nav_state[uid] = []
    top_options = list(load_subjects().keys())
    kb = build_keyboard(top_options)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.message()
async def text_handler(message: types.Message):
    uid = str(message.from_user.id)
    if not is_registered(uid):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    text = message.text.strip()
    if uid not in user_nav_state:
        user_nav_state[uid] = []
    current_path = user_nav_state[uid]

    if text.lower() == "–Ω–∞–∑–∞–¥":
        if current_path:
            current_path.pop()
        user_nav_state[uid] = current_path
        node = get_node(current_path) if current_path else load_subjects()
        if isinstance(node, dict):
            options = list(node.keys())
            kb = build_keyboard(options)
            prompt = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:" if current_path else "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            await message.answer(prompt, reply_markup=kb)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.", reply_markup=ReplyKeyboardRemove())
        return

    node = get_node(current_path) if current_path else load_subjects()
    if not (isinstance(node, dict) and text in node):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    current_path.append(text)
    user_nav_state[uid] = current_path
    new_node = get_node(current_path)
    if isinstance(new_node, dict) and new_node:
        options = list(new_node.keys())
        kb = build_keyboard(options)
        prompt = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –¥–ª—è {'/'.join(current_path)}:"
        await message.answer(prompt, reply_markup=kb)
    else:
        full_subject = "/".join(current_path)
        content = new_node if new_node is not None else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        # –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏—Å—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞ –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —Ç–µ–º–æ–π
        mark_subject_completed(uid, full_subject)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {full_subject}\n\n{content}", reply_markup=ReplyKeyboardRemove())

@dp.callback_query(lambda c: c.data.startswith("test_"))
async def start_test(callback: types.CallbackQuery):
    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    subject_key = callback.data.split("_", 1)[1]
    tests = load_tests()
    if subject_key not in tests:
        await callback.message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    uid = str(callback.from_user.id)
    questions = tests[subject_key]
    if not questions:
        await callback.message.answer("–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
        return
    if uid not in user_test_states:
        user_test_states[uid] = {}
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
    user_test_states[uid][subject_key] = {"current_index": 0, "correct": 0}
    current_index = 0
    question = questions[current_index]
    options = question.get("options", [])
    options_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"ans_{subject_key}_{i}")]
        for i, opt in enumerate(options)
    ])
    await callback.message.answer(f"üìå –í–æ–ø—Ä–æ—Å: {question['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {', '.join(options)}",
                                  reply_markup=options_buttons)

@dp.callback_query(lambda c: c.data.startswith("ans_"))
async def answer_handler(callback: types.CallbackQuery):
    data_parts = callback.data.split("_")
    if len(data_parts) < 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return

    subject_key = data_parts[1]
    try:
        option_index = int(data_parts[2])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return

    tests = load_tests()
    if subject_key not in tests:
        await callback.message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    uid = str(callback.from_user.id)
    questions = tests[subject_key]
    test_state = user_test_states.get(uid, {}).get(subject_key)
    if not test_state:
        await callback.message.answer("–¢–µ—Å—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    current_index = test_state["current_index"]
    if current_index >= len(questions):
        await callback.message.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return

    current_question = questions[current_index]
    correct_answer = current_question.get("answer")
    options = current_question.get("options", [])
    if option_index < 0 or option_index >= len(options):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.", show_alert=True)
        return

    selected_option = options[option_index]
    if selected_option == correct_answer:
        test_state["correct"] += 1
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
    await callback.message.answer(response)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    test_state["current_index"] += 1
    current_index = test_state["current_index"]
    if current_index < len(questions):
        next_question = questions[current_index]
        options = next_question.get("options", [])
        options_buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=opt, callback_data=f"ans_{subject_key}_{i}")]
            for i, opt in enumerate(options)
        ])
        await callback.message.answer(f"üìå –í–æ–ø—Ä–æ—Å: {next_question['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {', '.join(options)}",
                                      reply_markup=options_buttons)
    else:
        total = len(questions)
        correct = test_state["correct"]
        await callback.message.answer(f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.")
        user_test_states[uid].pop(subject_key, None)

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
